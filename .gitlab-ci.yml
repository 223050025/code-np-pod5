stages:
  - .pre
  - pre-flight
  - build
  - build-tools
  - build-archive
  - test-python
  - deploy

variables:
  CONAN_CONFIG_URL: https://artifactory.oxfordnanolabs.local/artifactory/ONT-Conan/configs/config-v24.zip
  GIT_SUBMODULE_STRATEGY: recursive

.build-docker-image:
  stage: .pre
  image: ${CI_REGISTRY}/traque/ont-docker-base/ont-base-docker:latest
  before_script:
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  when: manual
  retry:
    max: 2
    when: runner_system_failure
  script:
    - tag="${CI_REGISTRY_IMAGE}/${IMAGE_TAG}"
    - docker image build --pull --target "${PLATFORM}"
                         --tag "${tag}" --file ${DOCKERFILE} ci/docker
    - docker image push ${tag}

docker base aarch64:
  tags:
    - docker-builder-arm
  extends:
    - .build-docker-image
  variables:
    IMAGE_TAG: "build-arm64"
    DOCKERFILE: "ci/docker/Dockerfile.py39.arm64"

docker base x86-64:
  tags:
    - docker-builder
  extends:
    - .build-docker-image
  variables:
    IMAGE_TAG: "build-x64"
    DOCKERFILE: "ci/docker/Dockerfile.py39.x64"

#
# Templates (docker)
#
.docker template:
  stage: docker
  image: ${CI_REGISTRY}/traque/ont-docker-base/ont-base-docker:latest
  before_script:
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  retry:
    max: 2
    when: runner_system_failure


tag_version_check:
  stage: pre-flight
  only:
    - tags
  image: git.oxfordnanolabs.local:4567/minknow/images/build-x86_64-gcc9:latest
  script:
    - mkr_version="$(cmake -P ci/get_tag_version.cmake 2>&1)"
    - tag_version="${CI_COMMIT_TAG/#v/}"
    - if [[ "${mkr_version}" != "${tag_version}" ]]; then
        echo "Tag is for release ${tag_version}, but MKR version is $mkr_version";
        exit 1;
      fi


pre-commit checks:
    image: python:3.9
    stage: pre-flight
    tags:
        - linux
    script:
        - pip install pre-commit
          # if any of the hooks wanted to modify files, this will have a non-zero exit
        - pre-commit run --all-files
    variables:
        PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
    cache:
        paths:
            - ${PRE_COMMIT_HOME}

build-standalone-ubu20:
  stage: build
  image: ubuntu:20.04
  script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt update
    - apt install -y -V ca-certificates lsb-release wget
    - wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    - apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    - apt update
    - apt install -y cmake build-essential libzstd-dev libzstd-dev libboost-dev libboost-filesystem-dev libflatbuffers-dev libarrow-dev
    - mkdir build
    - cd build
    - cmake -DBUILD_PYTHON_WHEEL=OFF ..
    - make -j

.build-linux:
  stage: build
  before_script:
    - /opt/python/cp310-cp310/bin/pip install conan auditwheel
    - ln -n /opt/python/cp310-cp310/bin/auditwheel /usr/bin/auditwheel
    - ln -n /opt/python/cp310-cp310/bin/conan /usr/bin/conan
    - conan config install --verify-ssl=no ${CONAN_CONFIG_URL}
  script:
    - mkr_version="$(cmake -P ci/get_tag_version.cmake 2>&1)"
    - mkdir build
    - cd build
    - conan install --profile ${CONAN_PROFILE} -omkr_file_format:nanopore_internal_build=True ..
    - cmake ${CMAKE_ARGS} -DBUILD_SHARED_LIB=ON -DCMAKE_BUILD_TYPE=Release -DUSE_CONAN=ON -DBUILD_PYTHON_WHEEL=OFF ..
    - cmake --build . --config Release
    - ctest -C Release -VV
    - ../ci/install.sh
    - cmake ${CMAKE_ARGS} -DBUILD_SHARED_LIB=OFF -DCMAKE_BUILD_TYPE=Release -DUSE_CONAN=ON -DBUILD_PYTHON_WHEEL=ON -DPYTHON_VERSION=${PYTHON_VERSION} ..
    - cmake --build . --config Release
    - ctest -C Release -VV
    - ../ci/install.sh
    - ../ci/package.sh ${OUTPUT_SKU} ${AUDITWHEEL_PLATFORM}
  artifacts:
    name: "${CI_JOB_NAME}-artifacts"
    paths:
      - "mkr-file-format*.tar.gz"
      - "*.whl"

linux-x64-gcc9-release-build:
  image: quay.io/pypa/manylinux2014_x86_64
  extends: [".build-linux"]
  tags:
    - linux
  variables:
    CONAN_PROFILE: "linux-x86_64-gcc9-release"
    OUTPUT_SKU: "linux-x64"
    AUDITWHEEL_PLATFORM: manylinux2014_x86_64
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10"]

linux-aarch64-gcc9-release-build:
  image: quay.io/pypa/manylinux2014_aarch64
  extends: [".build-linux"]
  tags:
    - linux_aarch64
    - high-cpu
  variables:
    CONAN_PROFILE: "linux-aarch64-gcc9-release"
    OUTPUT_SKU: "linux-arm64"
    AUDITWHEEL_PLATFORM: manylinux2014_aarch64
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10"]

linux-x64-gcc9-release-build:
  image: quay.io/pypa/manylinux2014_x86_64
  extends: [".build-linux"]
  tags:
    - linux
  variables:
    CONAN_PROFILE: "linux-x86_64-gcc9-release"
    OUTPUT_SKU: "linux-x64"
    AUDITWHEEL_PLATFORM: manylinux2014_x86_64
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10"]

linux-aarch64-gcc9-release-build:
  image: quay.io/pypa/manylinux2014_aarch64
  extends: [".build-linux"]
  tags:
    - linux_aarch64
    - high-cpu
  variables:
    CONAN_PROFILE: "linux-aarch64-gcc9-release"
    OUTPUT_SKU: "linux-arm64"
    AUDITWHEEL_PLATFORM: manylinux2014_aarch64
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.7", "3.8", "3.9", "3.10"]

.build:
  stage: build
  script:
    - mkr_version="$(cmake -P ci/get_tag_version.cmake 2>&1)"
    - mkdir build
    - cd build
    - conan install --profile ${CONAN_PROFILE} -omkr_file_format:nanopore_internal_build=True ..
    - cmake ${CMAKE_ARGS} -DBUILD_SHARED_LIB=ON -DCMAKE_BUILD_TYPE=Release -DUSE_CONAN=ON -DBUILD_PYTHON_WHEEL=OFF ..
    - cmake --build . --config Release
    - ctest -C Release -VV
    - ../ci/install.sh
    - cmake ${CMAKE_ARGS} -DBUILD_SHARED_LIB=OFF -DCMAKE_BUILD_TYPE=Release -DUSE_CONAN=ON -DBUILD_PYTHON_WHEEL=${BUILD_PYTHON_WHEEL} ..
    - cmake --build . --config Release
    - ctest -C Release -VV
    - ../ci/install.sh
    - ../ci/package.sh ${OUTPUT_SKU}
  artifacts:
    name: "${CI_JOB_NAME}-artifacts"
    paths:
      - "mkr-file-format*.tar.gz"
      - "*.whl"

osx-x64-clang12-release-build:
  extends: [".build"]
  tags:
    - osx_x86
    - xcode-12.4
    - high-cpu
    - conan
  variables:
    CONAN_PROFILE: "macos-x86_64-appleclang-12.0-release"
    OUTPUT_SKU: "osx-x64"
    BUILD_PYTHON_WHEEL: "ON"

osx-arm64-clang13-release-build:
  extends: [".build"]
  tags:
    - osx_arm64
    - xcode-13.3.1
    - high-cpu
    - conan
  before_script:
    - conan config install --verify-ssl=no "${CONAN_CONFIG_URL}"
    - python3 -m venv .venv/
    - source .venv/bin/activate
    - pip install --upgrade pip
  variables:
    CONAN_PROFILE: "macos-aarch64-appleclang-13.1-release"
    OUTPUT_SKU: "osx-arm64"
    CMAKE_ARGS: "-DCMAKE_OSX_ARCHITECTURES=arm64"
    BUILD_PYTHON_WHEEL: "ON"

win-x64-msvc2017-release-build:
  extends: [".build"]
  tags:
    - windows
    - cmake
    - VS2017
    - conan
  script:
    - mkr_version="$(cmake -P ci/get_tag_version.cmake 2>&1)"
    - mkdir build
    - cd build
    - conan install --profile ${CONAN_PROFILE} -omkr_file_format:nanopore_internal_build=True ..
    - cmake -A x64 -G "Visual Studio 15 2017" -DBUILD_SHARED_LIB=ON -DCMAKE_BUILD_TYPE=Release -DUSE_CONAN=ON -DBUILD_PYTHON_WHEEL=OFF ..
    - cmake --build . --config Release
    - ctest -C Release -VV
    - ../ci/install.sh
    - cmake -A x64 -G "Visual Studio 15 2017" -DBUILD_SHARED_LIB=OFF -DCMAKE_BUILD_TYPE=Release -DUSE_CONAN=ON -DBUILD_PYTHON_WHEEL=ON ..
    - cmake --build . --config Release
    - ctest -C Release -VV
    - ../ci/install.sh
    - ../ci/package.sh ${OUTPUT_SKU}
  variables:
    CONAN_PROFILE: "windows-x86_64-vs2017-release"
    OUTPUT_SKU: "win-x64"
    
build-tools:
  stage: build-tools
  needs: ["linux-x64-gcc9-release-build"]
  image: git.oxfordnanolabs.local:4567/traque/ont-docker-base/ont-base-python:3.10
  tags:
    - linux
  script:
    - apt update; apt install -y cmake
    - mkr_version="$(cmake -P ci/get_tag_version.cmake 2>&1)"
    - pip install mkr_format-*cp310*.whl
    - cd python/mkr_format_tools/
    - echo "__version__ = \"${mkr_version}\"" >mkr_format_tools/_version.py
    - pip wheel . --wheel-dir ../../
  artifacts:
    name: "${CI_JOB_NAME}-artifacts"
    paths:
      - "mkr_format_tools-*.whl"

build-archive:
  stage: build-archive
  needs:
    - linux-x64-gcc9-release-build
    - linux-aarch64-gcc9-release-build
    - osx-x64-clang12-release-build
    - osx-arm64-clang13-release-build
    - win-x64-msvc2017-release-build
    - build-tools
  script:
    - find .
  artifacts:
    name: "${CI_JOB_NAME}-artifacts"
    paths:
      - ./*.tar.gz
      - ./*.whl

.pytest:
  stage: test-python
  image: git.oxfordnanolabs.local:4567/traque/ont-docker-base/ont-base-python:3.6
  tags: 
    - linux
  before_script:
    - python3 -m venv .venv/
    - source .venv/bin/activate
  script:
    - pip install ./${WHEEL_GLOB}
    - cd python
    - pip install pytest pytest-cov
    - pytest

    
tools-linux-x64:
  stage: test-python
  image: git.oxfordnanolabs.local:4567/traque/ont-docker-base/ont-base-python:3.9
  tags: 
    - linux
  before_script:
    - python3 -m venv .venv/
    - source .venv/bin/activate
  needs:
    - linux-x64-gcc9-release-build
    - build-tools
  script:
    - pip install mkr_format-*cp39*.whl mkr_format_tools*.whl
    - mkr-convert-fast5 ./test_data/ ./output_files --output-one-to-one
    - python3 python/mkr_format_tools/mkr_format_tools/test_utils/check_mkr_files_equal.py ./output_files/multi_fast5_zip.mkr ./test_data/multi_fast5_zip.mkr
  variables:
    WHEEL_GLOB: "*cp39*.whl"

pytest-linux-x64:
  extends: [".pytest"]
  image: git.oxfordnanolabs.local:4567/traque/ont-docker-base/ont-base-python:3.9
  tags:
    - linux
  needs:
    - linux-x64-gcc9-release-build
  variables:
    WHEEL_GLOB: "mkr_format-*cp39*.whl"

pytest-linux-aarch64:
  extends: [".pytest"]
  image: git.oxfordnanolabs.local:4567/traque/ont-docker-base/ont-base-python:3.9
  tags:
    - linux_aarch64
    - high-cpu
  needs:
    - linux-aarch64-gcc9-release-build
  variables:
    WHEEL_GLOB: "mkr_format-*cp39*.whl"

pytest-osx-x64:
  extends: [".pytest"]
  tags:
    - osx_x86
    - xcode-12.4
    - high-cpu
    - conan
  needs:
    - osx-x64-clang12-release-build
  variables:
    WHEEL_GLOB: "mkr_format-*.whl"

pytest-win-x64:
  extends: [".pytest"]
  tags:
    - windows
    - cmake
    - VS2017
    - conan
  needs:
    - win-x64-msvc2017-release-build
  before_script:
    - python -m venv .venv/
    - source .venv/Scripts/activate
  variables:
    WHEEL_GLOB: "mkr_format-*.whl"

internal_wheel_upload:
  stage: deploy
  image: ${UPLOAD_PYTHON_IMAGE}
  needs:
    - build-archive
  script:
    - ls -lh .
    - pip install twine
    - twine upload *.whl
  only: ["tags"]

external_wheel_upload:
  stage: deploy
  image: ${UPLOAD_PYTHON_IMAGE}
  needs:
    - build-archive
  script:
    - ls -lh .
    - pip install twine
    - export TWINE_REPOSITORY_URL=
    - export TWINE_CERT=
    - twine upload *.whl -u"${EXTERNAL_TWINE_USERNAME}" -p"${EXTERNAL_TWINE_PASSWORD}"
  only: ["tags"]
  when: manual
